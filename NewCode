

#import urllib2  # the lib that handles the url stuff
from urllib.request import urlretrieve


count =0
#data = urllib2.urlopen('https://s3.amazonaws.com/tcmg476/http_access_log') # it's a file like object and works just like a file
datecount = {} #Dictionary to store the count for every date
monthcount = {} #Dictionary to store the count for every month
errorcount=0
newcount=0
URL_PATH = 'https://s3.amazonaws.com/tcmg476/http_access_log'
LOCAL_FILE = 'local_copy.log'
reqcount = {} #dictionary for finding most requested


# Use urlretrieve() to fetch a remote copy and save into the local file path
local_file, headers = urlretrieve(URL_PATH, LOCAL_FILE)


for line in open(LOCAL_FILE): 
    #Example of one line
    #	
    
	#CODE FOR #2
    count+=1 #to get total requests
    left=line.find('[')
    right=line.find(':')
    date=line[left+1:right]
    if not date[0].isdigit(): 
        continue #skip
    if not date in datecount.keys():
        datecount[date]=1 #Set initial value
    else:
        datecount[date]+=1 #Increment value

    datewords=date.split('/')
    try:
        month=datewords[1]
        if not month in monthcount.keys():
            monthcount[month]=1 #Set initial value
        else:
            monthcount[month]+=1 #Increment value
    except:
        continue
		
		
	#CODE FOR #5 AND #6
	lefty=line.find('GET')
	if lefty==-1:
		lefty=line.find('PUT')
	left_pos = lefty + 4
	if lefty==-1:
		lefty=line.find('POST')
		left_pos = lefty + 5
	if lefty==-1:
		continue
	righty=line.find('HTTP')
	req=line[left_pos:righty]
	
	if not req in reqcount.keys():
		reqcount[req]=1
	else:
		reqcount[req]+=1
	


	
	 #CODE FOR #3 AND #4
    words=line.split()
    try:
        code=int(words[-2])
        if code>=400 and code<500:
            errorcount+=1
        if code>=300 and code<400:
            newcount+=1
    except:
        continue
		
#FINDING MOST REQUESTED
biggestval= 0
biggestkey= ' '
counting = 0

for k,v in reqcount.items()
	if v > biggestval:
		biggestval = v
		biggestkey = k
	if v==1:
		counting+=1 #incrementing the total amount of values that have 1 request
	

mostreqfile= biggestkey


print reqcount #printing the requested dictionary, just to check if it is working

print mostreqfile #printing the key with most requests
print counting #printing the amount of keys that only have 1 request

 
#ANSWERING #2
#for date in datecount.keys():
    #print('total for {} = {}'.format(date,datecount[date]))
#for month in monthcount.keys():
    #print('total for {} = {}'.format(month,monthcount[month]))
	





#ANSWERING #1  
#print ' ' #to add a new line
#print('total requests = {}'.format(count)) #for taking the amount of lines in logfile
#print ' '		
		
#ANSWERING #3 AND #4
per1count = (count/errorcount) #getting percentages
per2count = (count/newcount)

#print 'Amount of Sucessful Requests: ', errorcount
#print 'Percentage of Sucessful Requests: ', per1count, '%'
#print ' '
#print 'Amount of Unsucessful Requests: ', newcount
#print 'Percentage of Unsucessful Requests: ', per2count, '%'
